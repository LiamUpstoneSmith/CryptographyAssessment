# Task 1.4 Text Encryption APP using Stream Cipher and Steganography

"""
m1 & m2 input
m2 encrypted by stream cipher
output m1 with m2 hidden within
"""


# def lcg(seed: int) -> int:
#     a = 1664525
#     c = 1013904223
#     m = 2 ** 32
#     while True:
#         seed = (a * seed + c) % m
#         yield seed
#
#
# def stream_cipher(plaintext: str) -> str:
#     key = lcg(1)
#     ciphertext = ''.join([chr(ord(plaintext[i]) ^ (next(key) % 94 + 33)) for i in range(len(plaintext))])
#     return ciphertext
#

# def hide_text(text: str, secret: str) -> str:
#     secret_len = len(secret)
#     text_len = len(text)
#     if secret_len > text_len:
#         raise ValueError("Secret message is too long to hide in text")
#     result = ""
#     for i in range(text_len):
#         if i < secret_len:
#             result += chr((ord(text[i]) & 0xF8) | ((ord(secret[i]) >> 5) & 0x07))
#             result += chr((ord(text[i]) & 0xF8) | (ord(secret[i]) & 0x07))
#         else:
#             result += text[i]
#     return result


# def encryption():
#
#     # User enter message 2 to be encrypted
#     message2 = input("Enter Message to be hidden:\n")
#
#     # User enter message 1
#     message1 = input("Enter Plain message:\n")
#
#     encrypted_message = stream_cipher(message2)
#
#     hidden_message = hiding(encrypted_message, message1)
#
#     print("\nEncrypted Message: ", encrypted_message)
#     print("-------------------------------------------------")
#     print("\nHidden Message: ", hidden_message)
#     print("-------------------------------------------------")
#     print("\nDecrypted Message: ", finding(hidden_message))
#


"""
The hide_text function takes two strings as input: text is the string in which the ciphertext will be hidden,
 and secret is the ciphertext generated by the stream_cipher function. The function first encrypts the secret 
 message using the stream_cipher function. It then checks if the length of the secret message is less than or 
 equal to the length of the text message. If the secret message is longer than the text message, the function 
 raises a ValueError. Otherwise, the function iterates over each character in the text message and replaces it 
 with two new characters that encode the secret message. The encoding is done by taking the 3 most significant 
 bits of each character in the secret message and appending them to the 5 least significant bits of the corresponding 
 character in the text message.
"""


def encryption():
    # Get user input
    secret = input("Enter the secret: \n")
    text = input("Enter the text: \n")
    print("------------------------------------------")

    # Generate key using Linear Congruential Generator
    m = 2 ** 32
    a = 1664525
    c = 1013904223
    seed = 42
    key = []
    for i in range(len(text)):
        seed = (a * seed + c) % m
        key.append(seed % 256)

    # Encrypt secret with stream cipher
    encrypted_secret = []
    for i in range(len(secret)):
        encrypted_secret.append(ord(secret[i]) ^ key[i])

    # Return encrypted secret and key
    whitespace(text, secret)


# def hide_me(encrypted_secret, key, text):
#     # Convert encrypted secret to binary string
#     binary_secret = ''.join([format(x, '08b') for x in encrypted_secret])
#
#     # Convert key to binary string
#     binary_key = ''.join([format(x, '08b') for x in key])
#
#     # Insert binary secret into text using text-based reformat steganography
#     binary_text = ''.join([format(ord(x), '08b') for x in text])
#     binary_output = ''
#     for i in range(len(binary_text)):
#         if i < len(binary_secret):
#             binary_output += binary_secret[i]
#         binary_output += binary_text[i]
#     binary_output += binary_secret[len(binary_secret):]
#     binary_output += binary_key
#
#     # Convert binary output to string
#     output = ''
#     for i in range(0, len(binary_output), 8):
#         output += chr(int(binary_output[i:i+8], 2))
#
#     # Return output
#     print("Hidden message:", output)
#     find_me(output)
#
#
# def find_me(output):
#     # Convert output to binary string
#     binary_output = ''.join([format(ord(x), '08b') for x in output])
#
#     # Extract key from end of binary output
#     key = []
#     for i in range(1, 257):
#         key.append(int(binary_output[-i], 2))
#     key.reverse()
#
#     # Extract encrypted secret from binary output
#     encrypted_secret = []
#     for i in range(len(binary_output) - 256):
#         encrypted_secret.append(int(binary_output[i], 2) ^ key[i % 256])
#
#     # Decrypt secret with stream cipher
#     secret = ''
#     for i in range(len(encrypted_secret)):
#         secret += chr(encrypted_secret[i] ^ key[i % 256])
#
#     # Extract original text from binary output
#     binary_text = binary_output[len(encrypted_secret):len(binary_output)-256]
#     text = ''
#     for i in range(0, len(binary_text), 8):
#         text += chr(int(binary_text[i:i+8], 2))
#
#     # Print secret and original text
#     print('Secret:', secret)
#     print('Original text:', text)


def binary_to_decimal(binary):

    binary = ''.join(binary)
    binary = int(binary)

    decimal, i = 0, 0

    while binary != 0:
        dec = binary % 10
        decimal = decimal + dec * pow(2, i)
        binary = binary // 10
        i += 1

    return decimal


def decrypt_whitespace(ciphertext):

    text_length = len(ciphertext)
    text = []
    binary_secret = []

    # Create list with each text value
    for letter in ciphertext:
        text.append(letter)

    i = 0

    # checks if spaces are value 1 or 0 in binary
    while i != text_length - 1:
        try:
            if text[i] == " " and text[i+1] == " " and text[i+2] == " ":  # if value is 3 spaces
                del (text[i + 1])  # Deletes secret spaces
                del (text[i + 1])  # Deletes secret spaces
                binary_secret.append("1")

            elif text[i] == " " and text[i+1] == " ":  # if value is 2 spaces
                del (text[i+1])  # Deletes secret spaces
                binary_secret.append("0")
        except IndexError:
            break

        i += 1

    secret = ''

    binary_secret = ''.join(binary_secret)

    secret = ''.join([chr(int(binary_secret[i:i+8], 2)) for i in range(0, len(binary_secret), 8)])
    print("Secret: ", secret, type(secret))

    # # Convert binary_secret back to string
    # for i in range(0, len(binary_secret), 7):
    #
    #     # Slices secret from index range [0, 6]
    #     temp_data = binary_secret[i:i+7]
    #
    #     # Get decimal value of temp_data
    #     decimal_data = binary_to_decimal(temp_data)
    #
    #     # Store chr value of decimal_data
    #     secret += chr(decimal_data)

    # Converts text back into readable string
    text = ''.join(text)

    # Prints out values
    print("\nOriginal Text: \n", text)
    print("\nSecret: \n", secret, "\n")


def whitespace(text, secret):
    # Convert Secret to Binary string
    binary_secret = ''.join([format(ord(x), '08b') for x in secret])
    print("Binary Secret: ", binary_secret)

    ciphertext = []
    text_length = len(text)

    i = 0

    # Create list with each text value
    for letter in text:
        ciphertext.append(letter)

    # Change space value based on binary value of secret message
    while i != text_length - 1:
        try:
            if ciphertext[i] == " " and binary_secret[i] == "1":
                ciphertext[i] = "   "  # Replace space with 3 spaces indicating binary value 1

            elif ciphertext[i] == " " and binary_secret[i] == "0":
                ciphertext[i] = "  "  # Replace space with 2 spaces indicating binary value 0
        except IndexError:
            break

        i += 1

    # Make ciphertext a string
    ciphertext = ''.join(ciphertext)

    # Print out values
    print("\nCiphertext:", ciphertext, "\n")

    # Calls Decrypt_whitespace function
    decrypt_whitespace(ciphertext)


encryption()
